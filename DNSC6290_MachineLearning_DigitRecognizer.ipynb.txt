{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For the Digit Recognizer Kaggle case, our group employed the Convolutional Neural Networks technique, with Tensor plus Keras Sequential Neural Networks API as the underlying platform. The data was explored via Pandas and then trained based on the algorithm inspired by Peter Grenholm at https://www.kaggle.com/toregil/welcome-to-deep-learning-cnn-99/. - Soomin, Rongchu, Daniel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initialize Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "np.random.seed(1)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from keras.utils.np_utils import to_categorical # convert to one-hot-encoding\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\n",
    "from keras.optimizers import Adam\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.callbacks import LearningRateScheduler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = \"/home/choen51/Downloads/digit_train.csv\"\n",
    "test = \"/home/choen51/Downloads/digit_test.csv\"\n",
    "output_file = \"submission.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# For data exploration only\n",
    "pandas_train = pd.read_csv('/home/choen51/Downloads/digit_train.csv')\n",
    "pandas_test = pd.read_csv('/home/choen51/Downloads/digit_test.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Explore Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This dataset is sparse, meaning that there are many 0's in the feature matrix. Some pixels carry a lot of information about the written digits, while other pixels, especially the edges, are mostly 0's and not very informative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "5      0       0       0       0       0       0       0       0       0   \n",
       "6      7       0       0       0       0       0       0       0       0   \n",
       "7      3       0       0       0       0       0       0       0       0   \n",
       "8      5       0       0       0       0       0       0       0       0   \n",
       "9      3       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8    ...     pixel774  pixel775  pixel776  pixel777  pixel778  \\\n",
       "0       0    ...            0         0         0         0         0   \n",
       "1       0    ...            0         0         0         0         0   \n",
       "2       0    ...            0         0         0         0         0   \n",
       "3       0    ...            0         0         0         0         0   \n",
       "4       0    ...            0         0         0         0         0   \n",
       "5       0    ...            0         0         0         0         0   \n",
       "6       0    ...            0         0         0         0         0   \n",
       "7       0    ...            0         0         0         0         0   \n",
       "8       0    ...            0         0         0         0         0   \n",
       "9       0    ...            0         0         0         0         0   \n",
       "\n",
       "   pixel779  pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0         0  \n",
       "1         0         0         0         0         0  \n",
       "2         0         0         0         0         0  \n",
       "3         0         0         0         0         0  \n",
       "4         0         0         0         0         0  \n",
       "5         0         0         0         0         0  \n",
       "6         0         0         0         0         0  \n",
       "7         0         0         0         0         0  \n",
       "8         0         0         0         0         0  \n",
       "9         0         0         0         0         0  \n",
       "\n",
       "[10 rows x 785 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_train.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(42000, 785)\n",
      "(28000, 784)\n"
     ]
    }
   ],
   "source": [
    "print(pandas_train.shape)\n",
    "print(pandas_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The histogram shows the count of digits for each number in the training dataset. The graph below is used to visualize if there is an unequal sample size among the digits. The sample size for each digit appears to be comparable. There is no issue of unequal sampling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x7f3508dd9908>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY8AAAEWCAYAAACe8xtsAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAHfRJREFUeJzt3Xm4HVWZ7/HvLwmSEGaIMZOEITIKAmFQRJFB0kzBtsF0\ngyDNKCjg1atAexWV3Iu2chEVFKIkEAEjKKS7CchoowjhgExJiAQIJCGQEAhhCMGEt/+odUhlc4a9\nkrNPnZPz+zzPfk7VqlpVb609vGetql1bEYGZmVmOXlUHYGZm3Y+Th5mZZXPyMDOzbE4eZmaWzcnD\nzMyyOXmYmVk2Jw/rEJJel7RV1XFUSdIXJb2Y2mKzLhDPbEkHVrDfn0v6P52935ZImilp345e15w8\nWpXeeEvTB0HzY3DVcVVBUkjapqbsfEkTm+cjYv2IeLqd7ewnaW6j4qySpHWAi4BPp7ZYVLN8eGrH\nm2vKJ0o6vxNDbbiIOC0ivpdbT9K00ntthaS3SvPnrWYs20bEPR29bg5JJ6XjaT6WZyT9StKIjG10\nudeJk0fbDk8fBM2P52tXkNSnisDsvST1rnD3A4G+wLR21ttL0sc6IZ4O01mv8YjYsfm9BtwDfKn0\n3vu/VcXVQe5Jx7URcCDwd6BJ0vbVhrX6nDwylf6DPFHSc8CdqXxvSfdKWizpEUn7lepsKemPkl6T\ndJuknzb/197Sf+Pl4QZJvSSdI+kpSYskTZK0aU0sx0t6TtJLkv6ttJ3eks5LdV+T9KCkYZJ+JulH\nNfucLOkra9Au7/ZOJB0iaXra5zxJX5PUH5gCDC735CStK+liSc+nx8WS1i1t9+uS5qdlJ9XsZ7yk\nyyTdLOkN4FOSDpX0V0lLJM0p/7dWaq8T0rJXJJ0maQ9Jj6bn7qdtHGOLsUr6EDAzrbZY0p1tNNUP\ngLGtbP8Lkv7URruOl3SppCmp/f4s6QMpjlckPSFp15rN7pGei1ckXSmpb2nbh0l6OB33vZJ2Li2b\nLekbkh4F3pDUJ83PS8/rTEkHtHIc4yVdkKb3kzRX0lclLUjP5QlttE+r0vP/35IukfQy8E1JIyTd\nJenl9Pq/WtJGpTpzld6Lki6QdK2K/+Jfk/S4pN1Wc92Rqe1ek3SdpN+qjp5BRKyIiKci4lTgL8C3\n0/Z6Sbpe0gvp+bhbKbFIOh34HHBeet5/n8q/KenpFMM0SUesTruutojwo4UHMBs4sIXy4UAAVwH9\n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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f3508dc6cc0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(pandas_train[\"label\"])\n",
    "plt.title(\"Frequency Histogram of Numbers in Training Data\")\n",
    "plt.xlabel(\"Number Value\")\n",
    "plt.ylabel(\"Frequency\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below are the first few digits in the training set that show how this pixel data represents digits, and how the handwriting varies. Not all digits are written in the same style. For example, there is a lot of variation in how people write 3s and 0s."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f3508de27b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import math\n",
    "# plot the first 25 digits in the training set. \n",
    "f, ax = plt.subplots(5, 5)\n",
    "# plot some 4s as an example\n",
    "for i in range(1,26):\n",
    "    # Create a 1024x1024x3 array of 8 bit unsigned integers\n",
    "    data = pandas_train.iloc[i,1:785].values #this is the first number\n",
    "    nrows, ncols = 28, 28\n",
    "    grid = data.reshape((nrows, ncols))\n",
    "    n=math.ceil(i/5)-1\n",
    "    m=[0,1,2,3,4]*5\n",
    "    ax[m[i-1], n].imshow(grid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split Data into Train and Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "raw_data = np.loadtxt(train_file, skiprows=1, dtype='int', delimiter=',')\n",
    "x_train, x_val, y_train, y_val = train_test_split(\n",
    "    raw_data[:,1:], raw_data[:,0], test_size=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'matplotlib' has no attribute 'subplots'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-25-d6c4a70adf13>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfig\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0max\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m12\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m6\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'784x1 data'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m28\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m28\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'gray'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_title\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'28x28 data'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'matplotlib' has no attribute 'subplots'"
     ]
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2, 1, figsize=(12,6))\n",
    "ax[0].plot(x_train[0])\n",
    "ax[0].set_title('784x1 data')\n",
    "ax[1].imshow(x_train[0].reshape(28,28), cmap='gray')\n",
    "ax[1].set_title('28x28 data')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "x_train = x_train.reshape(-1, 28, 28, 1)\n",
    "x_val = x_val.reshape(-1, 28, 28, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "x_train = x_train.astype(\"float32\")/255.\n",
    "x_val = x_val.astype(\"float32\")/255."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.  0.  0.  1.  0.  0.  0.  0.  0.  0.]\n"
     ]
    }
   ],
   "source": [
    "y_train = to_categorical(y_train)\n",
    "y_val = to_categorical(y_val)\n",
    "#example:\n",
    "print(y_train[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(filters = 16, kernel_size = (3, 3), activation='relu',\n",
    "                 input_shape = (28, 28, 1)))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Conv2D(filters = 16, kernel_size = (3, 3), activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "#model.add(Conv2D(filters = 16, kernel_size = (3, 3), activation='relu'))\n",
    "#model.add(BatchNormalization())\n",
    "model.add(MaxPool2D(strides=(2,2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Conv2D(filters = 32, kernel_size = (3, 3), activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Conv2D(filters = 32, kernel_size = (3, 3), activation='relu'))\n",
    "model.add(BatchNormalization())\n",
    "#model.add(Conv2D(filters = 32, kernel_size = (3, 3), activation='relu'))\n",
    "#model.add(BatchNormalization())\n",
    "model.add(MaxPool2D(strides=(2,2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(512, activation='relu'))\n",
    "model.add(Dropout(0.25))\n",
    "model.add(Dense(1024, activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(10, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "datagen = ImageDataGenerator(zoom_range = 0.1,\n",
    "                            height_shift_range = 0.1,\n",
    "                            width_shift_range = 0.1,\n",
    "                            rotation_range = 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model.compile(loss='categorical_crossentropy', optimizer = Adam(lr=1e-4), metrics=[\"accuracy\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "annealer = LearningRateScheduler(lambda x: 1e-3 * 0.9 ** x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hist = model.fit_generator(datagen.flow(x_train, y_train, batch_size=32),\n",
    "                           steps_per_epoch=502,\n",
    "                           epochs=40, #Increase this when not on Kaggle kernel\n",
    "                           verbose=2,  #1 for ETA, 0 for silent\n",
    "                           validation_data=(x_val[:400,:], y_val[:400,:]), #For speed\n",
    "                           callbacks=[annealer])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluate via Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final loss: 0.0248, final accuracy: 0.9943\n"
     ]
    }
   ],
   "source": [
    "final_loss, final_acc = model.evaluate(x_val, y_val, verbose=0)\n",
    "print(\"Final loss: {0:.4f}, final accuracy: {1:.4f}\".format(final_loss, final_acc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "plt.plot(hist.history['loss'], color='b')\n",
    "plt.plot(hist.history['val_loss'], color='r')\n",
    "plt.show()\n",
    "plt.plot(hist.history['acc'], color='b')\n",
    "plt.plot(hist.history['val_acc'], color='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[412   0   0   0   1   0   1   0   1   0]\n",
      " [  0 462   0   0   0   0   0   1   0   0]\n",
      " [  0   0 437   1   0   0   0   1   1   0]\n",
      " [  0   0   1 422   0   1   0   1   0   2]\n",
      " [  0   0   0   0 400   0   0   0   0   2]\n",
      " [  0   0   0   0   0 377   0   0   1   0]\n",
      " [  0   0   0   0   0   0 394   0   1   0]\n",
      " [  0   0   0   0   0   0   0 457   0   0]\n",
      " [  0   0   0   1   0   0   1   0 412   0]\n",
      " [  0   1   0   0   1   0   0   1   3 403]]\n"
     ]
    }
   ],
   "source": [
    "y_hat = model.predict(x_val)\n",
    "y_pred = np.argmax(y_hat, axis=1)\n",
    "y_true = np.argmax(y_val, axis=1)\n",
    "cm = confusion_matrix(y_true, y_pred)\n",
    "print(cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Prepare for Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mnist_testset = np.loadtxt(test_file, skiprows=1, dtype='int', delimiter=',')\n",
    "x_test = mnist_testset.astype(\"float32\")\n",
    "x_test = x_test.reshape(-1, 28, 28, 1)/255."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_hat = model.predict(x_test, batch_size=64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_pred = np.argmax(y_hat,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open(output_file, 'w') as f :\n",
    "    f.write('ImageId,Label\\n')\n",
    "    for i in range(len(y_pred)) :\n",
    "        f.write(\"\".join([str(i+1),',',str(y_pred[i]),'\\n']))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
